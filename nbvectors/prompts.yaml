- |
  These directions are to be followed by any agent acting on this project directory. 
  These directions apply to any and all files, projects, or modules contained within 
  this directory.

- |
  Do not add extra features or fields to non-test classes which are not needed to meet 
  requirements, when specified in this way. Do not assume that new features are needed 
  unless they are directly specified or strongly implied by related requirements, 
  whether given in requirements comments or in chat.
- |
  When you see an double slash comment starting with the word REQUIREMENT, interpret it as a hard
  and absolute requirement. Do not implement any other code or test which violates the requirement.
- |
  When you see a section in any Java test files with the section or heading named 
  requirement or requirements, take it as a hard and absolute requirement. Do not implement any 
  other code or test which violates the requirement.
- |
  Do not remove any comment or line which contains the word REQUIREMENT. Do not remove 
  any documentation section named requirement or similar terms. Do not remove any 
  related subsections or sub-headings.
- |
  When adding javadoc, always use markdown style comments with triple-slashes. Do not mix 
  classic javadoc format and markdown style comments. Only modify or add javadoc to public 
  members which are supposed to be documented. Do not reformat ad-hoc comments on private elements.
- |
  When requirements are found and tests are created for requirements, ensure that each 
  and every requirement is tested.
- |
  Favor building native test fixtures in the code base rather than pulling in Mockito 
  for tests. Only use mockito for things which are difficult to test because fixtures 
  require remote system views, like wire protocols or other complex testing scenarios.
- |
  Assume that maven is being used.
- |
  Assume that the latest version of any dependency is being used. Do not use old or stale 
  information when determining how to use a version of a library dependency.
- |
  Do not add special code to non-test classes to make a test pass. This is in violation of 
  basic testing principles.
- |
  Changing non-test code to make a test pass is only valid if it constitutes a design change or 
  implementation fix. Anything that is a major change should be confirmed wiht me first.
- |
  When a file needs to be created as a testing asset, it should always go under the 
  src/test/resource path, and any tests associated with it should presume that as the logical 
  root of tests. Access to these files should be granted via the system class loader as a resource
  stream.
- |
  Do not assume that slf4j is in use. Actually assume it is not in use and do not add any slf4j 
  code to this project.
