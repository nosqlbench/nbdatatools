package io.nosqlbench.nbvectors.common.parquet;

/*
 * Copyright (c) nosqlbench
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import smile.io.Parquet;

import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class PathSorter {
  private final List<PathTraverser> entries = new ArrayList<>();
  private final Comparator<PathTraverser> comparator = new SizeReversedThenNameComparator();

  public PathSorter(Path root, String glob) {
    try {
      DirectoryStream<Path> stream = Files.newDirectoryStream(root, glob);
      for (Path path : stream) {
        PathTraverser traverser = new PathTraverser(path);
        this.entries.add(traverser);
      }
      entries.sort(comparator);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

  }

  public List<Path> getOrderedPaths() {
    return entries.stream().map(PathTraverser::getRoot).toList();
  }

  public final static class SizeReversedThenNameComparator implements Comparator<PathTraverser> {
    private static Comparator<PathTraverser> sizeComparator =
        Collections.reverseOrder(Comparator.comparingLong(PathTraverser::getSize));
    private static Comparator<PathTraverser> nameComparator =
        Comparator.comparing(pt -> pt.getRoot().toString());

    @Override
    public int compare(PathTraverser o1, PathTraverser o2) {
      int result = sizeComparator.compare(o1, o2);
      if (result != 0)
        return result;

      return nameComparator.compare(o1, o2);
    }
  }
}
