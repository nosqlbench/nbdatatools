# arbitrary jjq stages can be run here
remappers:
  remap_strings_to_numbers:
    input_file: "source_of_filtering_values.jsonl"
    expression: |-
     nbindex("id";"id_map.json")

# { "id":id, "vector":[...] }
training_file: "source_of_training_vectors.jsonl"
training_expr: |-
  nbremap_field("id";"id_map.json") | {id:.id,vector:.vector_fieldname}

# { "id":id, "vector":[...] }
test_file: "source_of_query_vectors.jsonl"
test_expr: |-
  nbenum("id") | {id:.id,vector:.vector}  

# { "ids": [...] }
neighborhood_file: "source_of_neighbor_lists.jsonl"
neighborhood_expr: |-
  {ids:.results|[.[].id]|map(nbremap("id";"id_map.json"))}

# { "distances": [...] } # presumed to be in cosine similarity "distance", from -1.0 to 1.0
# { "scores": [...] } # presumed to be in unit intervals, and converted back to cosine similarity
distances_file: "source_of_distances.jsonl"
distances_expr: |-
  {scores:.results|map(.score)}

# IF these are provided, then one of the following is expected:
# JSON format described by docs/predicate_format_v1.md like
# ```
# { "field": 0, "op":">", values: [3] }
filters_file: "ground-truth-cache.jsonl"
filters_expr: |-
  {ids:.element_ids|map(nbremap("id";"id_map.json"))}|{"field":0,"op":"in","values":.ids}
  

